이름
나이
성별 남 여
주소 서울 경기 강원 select
취미 독서 만화 영화 코딩
입력내용

등록 취소 버튼

윈도우창하나 띄움

출력은 새화면

이름
나이
성별
주소
취미 
입력내용


인터벌 

화면보기 정지 버튼

새창에 백그라운드 노랑 빨강 핑크 그린 파랑









객체란 서로 연관된 변수와 함수를 그룹핑한 그릇


객체 내의 변수를 프로퍼티(property) 

함수를 메소드(method)

var person = {}  변수 프로퍼티 생성
person.name = 'egoing'; 
person.introduce = function(){
    return 'My name is '+this.name;
}
document.write(person.introduce());
객체를 만드는 과정에 분산되어 있다. 객체를 정의 할 때 값을 셋팅하도록 코드를 바꿔보자.

var person = {
    'name' : 'egoing',
    'introduce' : function(){
        return 'My name is '+this.name;
    }
}
document.write(person.introduce());
만약 다른 사람의 이름을 담을 객체가 필요하다면 객체의 정의를 반복해야 할 것이다.
 객체의 구조를 재활용할 수 있는 방법이 필요하다. 이 때 사용하는 것이 생성자다.


textelement
element
둘다 요소임

a 요소 element

href 속성 attribute

br 은 빈 empty element

p 는 속성도있고 textelement 도 있다. id ,class 속성 <p>aaa</p> aaa는 textelement

create element

id=setInterval(function(){             
             
             
         },1000); //id에 인터벌 선언 var id;


new Date();
new Date(value);
new Date(dateString);
new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);

year
 Integer value representing the year. Values from 0 to 99 map to the years 1900 to 1999. See the example below.
month
 Integer value representing the month, beginning with 0 for January to 11 for December.

년월은 integer value 로 사용


var Xmas95 = new Date('December 25, 1995 23:15:30');//date(datestring(으로 만듦)

dateObj.getFullYear()
dateObj.getYear()

dateObj는 var d =new date()로 선언된 obj


선언한 obj에 함수를 만들고 그 함수에 get속성을 이용해서 변수에 다 넣는다 다넣을려면 다른 변수에 받은
변수를 한번에 넣는다


window.onload=function()
{
    var id;
   document.getElementById("start").onclick=function()
   {
         id=setInterval(function(){
         var now=new Date(); //date 받는 함수가 안에 있어야함.
         var y=now.getFullYear();
         var m=now.getMonth()+1;
         var d=now.getDate();
         var h=now.getHours();
         var mi=now.getMinutes();
         var sec=now.getSeconds();
         var r=y+"."+m+"."+d+" "+h+":"+mi+":"+sec;
          console.log(r);
        document.getElementById("result").innerHTML=r;
         },1000);

   }
   document.getElementById("end").onclick=function()
   {
             clearInterval(id); //return 타입 id 넣어야함.
   }
    
}


객체지향
 =>은닉성

new constructor[([arguments])]

응집성(▲) 결합성(▼)

 function Student(name, age)
        {
            /*this.name=name;
            this.age=age;
           */
            var name=name;
            var age=age;
           
           this.prt=function()
           {
               console.log(name+", "+age);
           }         
        }
    
    var s1=new Student("hong",10);
    var s2=new Student("kim",20);
        s1.prt();
        s2.prt();
    
   /*     console.log(s1.name+", "+s1.age);
        console.log(s2.name+", "+s2.age);
   */     


function Person(name)
      {
         var n=name;
      Person.prototype.prt=function()
      {
         consol.log(n);        
      }

자바스크립트의 모든 객체는 생성과 동시에 자기자신이
생성될 당시의 정보를 취한 Prototype Object 라는 새로
운 객체를 Cloning 하여 만들어낸다.


} 프로토타입이 객체를 만들어내기위한 원형이라면
} 이 Prototype Object 는 자기 자신의 분신이며 자신을 원

형으로 만들어질 다른 객체가 참조할 프로토타입이 된다.

  



} 즉 객체 자신을 이용할 다른 객체들이 프로토타입으로 사
용할 객체가 Prototype Object 인 것이다.

  

} 즉 위에서 언급한 __proto__라는 prototype 에 대한
} link는 상위에서 물려받은 객체의 프로토타입에 대한 정
보이며 prototype 프로퍼티는 자신을 원형으로 만들어질
새로운 객체들 즉 하위로 물려줄 연결에 대한 속성이다

[element0, element1, ..., elementN]
new Array(element0, element1[, ...[, elementN]])
new Array(arrayLength)


var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])



