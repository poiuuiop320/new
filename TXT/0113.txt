오버라이딩은:재정의라고 한다.

-상속관계에서 부모클래스에서
 정의된 메서드를 자식클래스에서 다시 정의한다.=재정의;

상위에서 정의된것을 하위에서 똑같은 이름으로 다시 쓰면 (메서드를)

메서드이름이 같아야되고 개수 타입도 같아야 한다. 리턴타입도 같아야한다.

접근 제한자 접근 지정자

오버라이딩 할때 접근 제한자가 같거나 크면 사용할 수 있다.오버라이딩 할 수 있다.
부모(protected)-->자식(protected.public)

Exception 관점


오버라이딩은 상위에서 공통점을 추상적으로 하나만들고

하위메서드에서 재정의 한다. 다른 정보 다른 값을 갖고있기때문에 그럼 각각 알맞는 정보를

가져올수 있다.


final 변수를 할수있다  //상수
final 메서드를 할수있다  //overriding 할수없다.
final 클래스를 할수있다 //상속 불가  단일 클래스 자식클래스가 없어 종단 클래스라고한다.

static 변수//클래스변수 정적 변수 정적변수 static 변수
 ->공유변수
 ->클래스 로딩시에 읽어오며 초기화는 static {} 스태틱블럭을 이용하여 초기화한다.
 ->클래스.변수

static 메서드
 ->클래스 이름.메서드
 ->지역변수 클래스변수(인스턴스 변수 사용못함)

패키지

도메인 거꾸로 정한다 (패키지 이름을)
 

접근 제한자
 private     private int su 이런식으로
 public      public int su 이런식으로
 default    생략된 default 접근제한자 int su 이런식으로 
 protected   portected int su 이런식으로

default 는 같은 패키지 안에서 사용할 수 있다. 다른패키지는 안됨
protected   같은패키지 안에서 사용할 수 있다. 다른패키지일 경우 상속관계에서 
                                            자식클래스에서 부모로의 접근은 가능
private 같은클래스
public 공개

줄맞춤 ctrl + i


링크걸고

스토리보드 
파워포인트
프로토타입
ui로직
연계성 통일성
생상 글꼴
이벤트처리
레이아웃

메인 - 일반
     - 모바일

서브페이지 - 일반
           - 모바일

super 부모 참조변수나 생성자를 가져옴
this :참조변수 this.
this  생성자this.
super 참조변수
super 생성자
 
abstract
interface
object
==================
 클래스  변수
       메서드
 
자료타입
 primitive type(기본타입)
   byte short ing long float double
          char
   boolean

  refrence type(참조타입)
  배열
  클래스
 
  생성자 
   객체 생성을 위한 모양(꼴)
   클래스이름()
   {

    }
  생성자 오버로딩
   => 클래스내에서 여러개의 생성자를 정의할 수 있다.
   => 클래스내에서 생성자이름이 같으나
      매개변수 타입, 순서, 갯수가 다를때 다른 생성자로 인식

  매서드 오버로딩 (method overloading) :다중정의
   => 클래스내에서 메서드 이름이 같으나 매개변수
     타입, 순서, 갯수가 다를때 다른 메서드로 인식
   => 리턴타입 무관
   => 클래스내에서 이름이 같은 메서드를 여러개 정의할 수 있다.

  접근제한자
    private  : 클래스내에서 
    default  : 같은 패키지내에서
    protected => 같은 패키지내, 다른 패키지 상속관계에서
    public  : 전체 공개

  final 변수 : 상수
       메서드 : 오버라이딩 불가
       클래스 : 상속불가(종단클래스)
  final 인스턴스 변수 생성자.
 
   static 변수 : 클래스로딩시에 생성
               클래스이름.변수
   static 메서드 : 클래스이름.메서드
                지역변수, 클래스변수( 인스턴스변수 x)
  
 ====>
     상속관계  extens
    메서드 오버라이딩(method overriding) : 재정의
   상속관계에서 부모에서 정의한 메서드를
   자식에서 다시 정의
  => 메서드이름, 리턴타입, 매개변수 타입, 순서, 갯수 같아야
  => 접근지정자 같거나 범위가 커야 한다.// 
  this :  참조변수 this
           class T
       {
         private String name;
         private int su; 
          public void setName(String name)
         {
               this.name=name;
          }
          public T(String name, int su)
         {
             this(name); //생성자 this : 생성자에서 다른 생성자를 호출
                         //첫줄에 기입
             this.su=su;
         }
          public T(String name)
          {
          }
  
        }


   , 생성자 this 
  super : 참조super, 
          생성자 super


class Man4
{
	  private String name;
	  private int age;
      ///public Man4(String name, int age)
      //{
     //  this.name=name;
     //  this.age=age;
    //  }
      public Man4(){}   
}
class Student4 extends Man4
{
	private String hak;
	private String stcode;
	 public Student4(String name, int age)//부모생성자를 받는 모양
	 {
		 super(name, age); 
	 }
	public Student4(String hak, String stcode) {
                super();
	public Student4(String name, int age,String hak, String stcode) {
                 //super();위에 주석
		 super(name, age); //두개는 부모생성자에게 올리고
		 this.hak=hak;     //두개는 내가 갖고
		 this.stcode=stcode;
	}
	
}
public class SuperTest4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}


\\\\\\\\\\\\\\
class Man4
{
	  private String name;
	  private int age;
      public Man4(String name, int age)
      {
    	  this.name=name;
    	  this.age=age;
      }  
}
class Student4 extends Man4
{
	private String hak;
	private String stcode;
	 public Student4(String name, int age, String hak)
	 {
		 super(name, age);
		 this.hak=hak; 
	 }
	public Student4(String name, int age,String hak, String stcode) {
         /*super(name, age);
         this.hak=hak;*/
		this(name, age, hak);
                //상위 생성자를 연결 할 수 있다.
		 this.stcode=stcode;
	}
	
}
public class SuperTest4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
class Man
{
	private String name;
	private int age;
	public Man()
	{
		System.out.println("Man Constructor");
	}
	public Man(String name, int age)
	{
		this.name=name;
		this.age=age;
		System.out.println("ddd");
	}
	public Man(String name)
	{
		this.name=name;
	}
}
class Student extends Man
{
	private String Hak;
	private String stcode;
	public Student()//no-argument Constructor
	{
		super();//부모의 생성자를 호출한다.//매개변수가 없다.보통 생략되어있음
		System.out.println("Student Constuctor");
	}
	
}
public class B1SuperTest3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Student ins = new Student();
		

	}

}
