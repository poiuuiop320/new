public default 클래스앞에 붙일수 있다.

abstract   단일

interface  여러개

object

객체를 만들지 않겠다. -> 클래스명 앞에

추상클래스를 인스턴스를 객체를 만들지 않게 하는 클래스  객체를 만드려면 상속받은 메서드를 만들어야한다.

해당하는 클래스앞에                                                    

abstract 클래스 일반클래스 or추상메서드로 이루어진 클래스 extends로 상속받아서 만들어줘야함 몸통 정의가 안된 메서드
{
  @Override
	public void shape() {
		// TODO Auto-generated method stub
		
	}
	위를 만들어 줘야 한다.오버라이딩이 이루어져야 한다.
}

부모 추상클래스  일반클래스  인터페이스  클래스  인터페이스

자식 일반클래스  추상클래스 인터페이스   인터페이스  클래스

         extends   extends  extends            x         implements




clast T extends 부모클래스  implements 인터페이스 순서
{


}

10명 최대


성적

이름 국어 영어 총점 평균 
1명당 데이터 

private String name;
private int kor;
private int eng;
private int tot;
private double avg;

//생성자.
//get
//set

//이름으로 오름차순. .String .compareToignore


while문 으로 no하면 빠져나오고 출력.



이름 주민번호 이메일 도메인id 성별 나이 Class GregorianCalendar

abstract class  Dog //추상클래스 객체를 안만들고 해당자료들 클래스내에서 공통화된 범주를 만드는것 객체를 안만들때 사용
{
	int age; //인스턴스변수 나 생성자를 만들수있고 상속받은자식에서 생성자를 만들어 줘야 한다.
	public static String name;//일반변수도 가능하다

	public void eat() //일반 메서드도 가능하다
	{
		System.out.println("닭뼈 ㄴㄴㄴ");
	}
public abstract void shape();//추상메서드 몸통이없는 메서드 //선언동시에 메서드를 만들어야함 //강제화로 메서드

 //Ab1 ins = new Ab1(); //Cannot instantiate the type Ab1 이타입으로 객체만들수 없다.
	//Dog ins = new Dog();//마찬가지


{//상위에 머리만있는 메서드때문에 하위에서 만들어줘야한다.
//T1 ins = new T1();->abstract class ins 참조변수
		/*T2 ins2 = new T2();//뒤에 
		ins2.prt();ins2.view();
		T1 ins3= new T2();//
*/		//T2 ins4 = new T1();//T1 으로 객체 생성 안됨.
		T2 ins2 = new T2();
//T2 ins4=new T1();// 객체생성이 안됨=>추상클래스이다. 형변환(T2)해도 객체생성안된다.

//앞에 interface를 사용함 
/public abstract 안에 있는것이다.생략됨

//생성자 안됨
	int su = 10;//public static final 변수임 (인터페이스는)
	void prt();//public abstract method //접근제한자 지정예약어가 생략됨 자료가... 
	//public void prt();
	//초기화블럭도 안됨

name에 접근하려면 생성자를 만들어서 접근해야한다.

/*추상클래스                              인터페이스
 * 객체 생성못함                          객체생성못함
 * abstract                                   interface
 * extends                                   implements
 * 단일 상속                                여러개 상속(기능추가)
 * 인스턴스변수, final static         	 public static final
 * 일반메서드+추상메서드          	  public abstract
 * 생성자 사용가능                      생성자 x 
 *

	ins.prt();  //A타입 가리키는거
		B ins2 = new AB();
		ins2.show(); //B타입 가리키는거
모든클래스는 object 상속받는다


equals 는 hashCode랑 같이 써야한다.
toString
AObject1 ins = (AObject1)obj;//형변환해서 
//return super.equals(obj);// obj로 받음
System.out.println(ins.toString()); //객체에대한것을 문자화한것임 //객체 출력

String name="hong";//string 클래스형

System.out.println(name==name2);//참조변수비교

System.out.println(name.equals(name2));//객체안 객체값을 비교

System.out.println(a1.compareTo(a2));//문자열과 문자열 비교는 compareTo를 비교한다.

System.out.println(a1.compareToIgnoreCase(a2));//대소문자 구분없이 문자열 비교

int loc =a3.indexOf("b",3);//n부터 찾는다 문자열
		//int loc =a3.indexOf("b");//0부터

String dept="aaa;bbb;ccc;";
		String[] arr=dept.split(";");
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
		for (String string : arr) {
			System.out.println(string);
			
		}
		String irum="hong kildong";
				String result = irum.substring(2);//n부터
		System.out.println(result);
		
		String result2=irum.substring(3, 4);//n부터 ,(콤마)n까지
		System.out.println(result2);
		
		String aaa="                        a  b    c      d ";
		System.out.println(aaa.trim());
		System.out.println(aaa);//aaa.toString()이거와 같은
		
		String n1="hong gildong";
		String nn= n1.replace("g", "123");
		System.out.println(nn);

/*String
 * StringBuffer 동기화된거
 * StringBuilder 비동기화
 * 
 * 
 *  System.out.println(sb.length());
	    System.out.println(sb1.length());
	    System.out.println(sb2.length());
	    System.out.println("-------");
	    System.out.println(sb.capacity());//기본용량
	    System.out.println(sb1.capacity());//16+7
	    System.out.println(sb2.capacity());//10
StringBuffer sb = new StringBuffer();//16개공간이생김
System.out.println(sb.toString());//아래와같음
		System.out.println(sb);//기존 스트링버퍼를 출력
System.out.println(sb.capacity());//저장할수있는 용량
		System.out.println(sb.length());//글자에대한

	StringTokenizer stz1 = new StringTokenizer("홍길동 김하나 오준석");
		int count=stz1.countTokens();
		System.out.println(count);
		while(stz1.hasMoreElements())//nextelements
		{
			String st = (String)stz1.nextElement();
			System.out.println(st);
		}
System.out.println("done!");
StringTokenizer stz2= new StringTokenizer("홍길동,김하나,오준석",",");

while(stz2.hasMoreTokens())//nextToken //위둘다 사용가능
{
	System.out.println(stz2.nextToken());
}
//인스턴스변수는 private을 사용한다
BufferedReader in = new BufferedReader(new InputStreamReader(System.in));//ctrl+ shift +o  //ctrl+i
		Sungjuck[] s= new Sungjuck[10];//객체를생성으로 사용할수있다.


	Vector v= new Vector();
		v.add("aaa");
		v.add("bbb");
		v.add(new Date());
		v.add(10.2);
		v.add(10);
		v.add(new Double(10.2));
		v.add(new Integer(20));
		
		System.out.println(v);
		System.out.println(v.elementAt(2));
		System.out.println(v.size());
		System.out.println(v.elementAt(5));
		System.out.println(v.get(6));//get도 사용 가능하다.
		/*for (int i = 0; i < v.size(); i++) {
			System.out.println(v.get(i));
			
		}*/
		  
				/*  for(int i=0; i<v.size(); i++)
					  System.out.println(v.elementAt(i));*/
				  
				  /*
				  for(int i=0; i<v.size(); i++)
					  System.out.println(v.get(i));//arraylist 비동기처리
				  */
				  //http://docs.oracle.com/javase/7/docs/api/java/util/Enumeration.html
				/*  Enumeration enu=v.elements(); //동기처리
				  while(enu.hasMoreElements())   
					   System.out.println(enu.nextElement());*/
				  
				 
				  Iterator ita=v.iterator();//리스트 비동기처리
				  while(ita.hasNext())
					  System.out.println(ita.next()); //자료를 받아오는 여러가지 방법.메서드()로 받아옴
		
	
		for (int i = 0; i < v.size(); i++) {
			System.out.println(v.get(i));//결과를 보면 같은 v참조변수에 중복값을 가져오는걸 볼 수 있다.
			
		}
		v.remove(0);//remove메서드를 이용해서 0제거
		System.out.println(v.get(0));//0번째를 확인하니 두번째가 앞으로 값이 옮겨짐
		for (int i = 0; i < v.size(); i++) {
			System.out.println(v.get(i));
			
		}
		//remove는 첫번째 만나는 정보만 삭제된다.
		

         v.add(10);  //jdk5 auto-boxing
	         v.add(20);
	         v.add(30);
	         
	       /*  int tot=0;
	         for(int i=0; i<v.size(); i++)
	         {
	        	 tot+=((Integer)v.get(i)).intValue();
	         }*/
	         
	         int tot=0;
	         for(int i=0; i<v.size(); i++)
	         {
	        	 tot+=(Integer)v.get(i);  //auto-unboxing
	         }


			Vector<String> v=new Vector<>(); //generic 반드시 제네릭써서 프로그램구현해야함 제네릭은5버전 생략은 7버전
			  v.add("hong");
			  v.add("kim");
			  //v.add(10);
			  v.add("park");
			   Iterator<String> ita=v.iterator(); 
	                while(ita.hasNext())
	                {
	                	String item=ita.next();
	                	System.out.println(item);
	                }
	                System.out.println("==============");
	            for(int i=0; i<v.size(); i++)
	            {
	            	String item=v.get(i);//형변환 할 필요가 없이.
	            	System.out.println(item);
	            }

	}

LinkedList<String> list=new LinkedList<>();
list.add("hong");
list.add("kim");
list.add("park");
list.add("hong");
/*int size=list.size();
for (int i = 0; i<size; i++) {
	
	System.out.println(list.get(i));
}*/
Iterator<String> ita=list.iterator();
	String data=list.pop();//스택구조 이용해서 
	
		ht.put("a1", 100);//new Integer(100)컬렉션 정보로 객체가 들어간다. 
		ht.put("a2", 200);//박싱
		ht.put("a3", 100);//buckets
		/*Integer one = ht.get("a1");
	System.out.println(one);//언박싱*/
		/*Enumeration<String>enu=ht.keys();
	while(enu.hasMoreElements())
	{
		String key = enu.nextElement();
		Integer value=ht.get(key);
		System.out.println(key+","+value);//
	}*/
		Iterator<String>ita = ht.keySet().iterator();
		while(ita.hasNext())
		{
			String key=ita.next();
			Integer value = ht.get(key);
			System.out.println(key+","+value);
		}



